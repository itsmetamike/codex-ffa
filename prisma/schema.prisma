generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Session {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  brief         String?
  parsedBrief   String?        // Changed from Json to String - store JSON as text
  vectorStoreId String?
  ideas         Idea[]
  scores        Score[]
  panelNotes    PanelNote[]
  evolutionLogs EvolutionLog[]
  contextPacks  ContextPack[]
  guardrails    Guardrail[]
  generations   Generation[]
}

model Idea {
  id             String   @id
  sessionId      String
  session        Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  title          String
  oneLiner       String
  linkedThemes   String   // Changed from String[] - store as comma-separated or JSON string
  brandFitGuess  String
  requiredAssets String   // Changed from String[] - store as comma-separated or JSON string
  risks          String   // Changed from String[] - store as comma-separated or JSON string
  createdAt      DateTime @default(now())
  scores         Score[]
}

model Score {
  id          String   @id @default(cuid())
  ideaId      String
  idea        Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  novelty     Int
  feasibility Int
  roiProxy    Int
  risk        Int
  fit         Int
  rationale   String
  createdAt   DateTime @default(now())
}

model PanelNote {
  id        String   @id @default(cuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  persona   String   // Changed from Persona enum to String
  approval  String
  caution   String
  redFlag   String
  ask       String
  createdAt DateTime @default(now())
}

model EvolutionLog {
  id         String   @id @default(cuid())
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  actor      String
  summary    String
  details    String?
  sources    String   // Changed from String[] - store as comma-separated or JSON string
  confidence Float?
  createdAt  DateTime @default(now())
}

model VectorStore {
  id            String         @id @default(cuid())
  brand         String         @unique
  vectorStoreId String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  files         FileMetadata[]
}

model FileMetadata {
  id            String       @id @default(cuid())
  vectorStoreId String
  vectorStore   VectorStore  @relation(fields: [vectorStoreId], references: [id], onDelete: Cascade)
  fileId        String       // OpenAI file ID
  docType       String       // MMM_RESULT, BRAND_SAFETY_GUIDELINES, etc.
  brand         String
  title         String?
  effectiveDate String?
  status        String       @default("processing")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model ContextPack {
  id                String   @id @default(cuid())
  sessionId         String
  session           Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  brandVoice        String
  visualIdentity    String
  audienceSummary   String
  keyInsights       String   // Store as JSON string array
  creativeLessons   String   // Store as JSON string array
  strategyHighlights String  // Store as JSON string array
  budgetNotes       String?
  risksOrCautions   String   // Store as JSON string array
  sources           String   // Store as JSON string array of file citations
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Guardrail {
  id        String   @id @default(cuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  category  String
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Generation {
  id        String   @id @default(cuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  brand     String?  // Brand associated with this generation
  type      String   // "context", "brief"
  content   String   // JSON string of the generated content
  step      Int      // Step number where it was generated (2=context, 3=brief)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeepResearchJob {
  id              String   @id @default(cuid())
  sessionId       String
  responseId      String   @unique // OpenAI response ID for background job
  status          String   // "pending", "in_progress", "completed", "failed"
  prompt          String   // The research prompt sent to the model
  result          String?  // JSON string of the research result
  error           String?  // Error message if failed
  toolCalls       String?  // JSON array of tool calls made during research
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  updatedAt       DateTime @updatedAt
}
