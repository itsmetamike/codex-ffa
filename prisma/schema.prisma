generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Persona {
  CEO
  CFO
  CTO
  CSO
}

model Session {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  brief         String?
  parsedBrief   Json?
  vectorStoreId String?
  ideas         Idea[]
  scores        Score[]
  panelNotes    PanelNote[]
  evolutionLogs EvolutionLog[]
}

model Idea {
  id             String   @id
  sessionId      String
  session        Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  title          String
  oneLiner       String
  linkedThemes   String[]
  brandFitGuess  String
  requiredAssets String[]
  risks          String[]
  createdAt      DateTime @default(now())
  scores         Score[]
}

model Score {
  id         String   @id @default(cuid())
  ideaId     String
  idea       Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  novelty    Int
  feasibility Int
  roiProxy   Int
  risk       Int
  fit        Int
  rationale  String
  createdAt  DateTime @default(now())
}

model PanelNote {
  id        String   @id @default(cuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  persona   Persona
  approval  String
  caution   String
  redFlag   String
  ask       String
  createdAt DateTime @default(now())
}

model EvolutionLog {
  id         String   @id @default(cuid())
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  actor      String
  summary    String
  details    String?
  sources    String[]
  confidence Float?
  createdAt  DateTime @default(now())
}
